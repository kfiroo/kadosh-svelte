{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Card.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import _ from 'lodash'\n    import Card from './Card.svelte'\n\n\timport {\n\t    PLACE_CARD,\n        REMOVE_CARDS,\n        GAME_OVER,\n        WINNER,\n\n        createInitialState,\n        playTurn,\n        getAllValidMoves,\n        isFaceCard,\n        playGame\n\t} from './game'\n\n    let mode = 'human'\n\n    $: {\n        if (mode) { // reset when mode changes\n            state = createInitialState()\n        }\n    }\n\n    let pendingMoves = null\n    let selectedPosition = -1\n\n    let state = createInitialState()\n    let moves\n    $: {\n        moves = getAllValidMoves(state)\n        selectedPosition = -1\n    }\n    function playTurn2() {\n\t    if (state.phase === GAME_OVER || state.phase === WINNER) {\n\t        state = createInitialState()\n\t        return\n        }\n        if (mode === 'human') {\n            return\n        }\n\n        const action = moves[_.random(moves.length - 1)]\n        state = playTurn(state, action)\n    }\n\n    $: nextCard = state.deck[state.deck.length - 1]\n\n    const isValid = position => !!_.find(moves, ({index, index1, index2}) =>\n        index === position || index1 === position || index2 === position\n    )\n\n    const onBoardClick = ({currentTarget}) => {\n        if (state.phase === GAME_OVER || state.phase === WINNER) {\n\t        return\n        }\n        \n        const { target } = event\n        const position = parseInt(currentTarget.dataset.position, 10)\n        const card = state.board[position]\n        if (state.phase === REMOVE_CARDS) {\n            if (!card) {\n                return\n            }\n\n            if (parseInt(card.value, 10) === 10) {\n                state = playTurn(state, {\n                    type: REMOVE_CARDS,\n                    index1: position\n                })\n\n                return\n            }\n\n            if (selectedPosition > -1) {\n                const action = _.find(moves, ({index1, index2}) =>\n                    index1 === position && index2 === selectedPosition ||\n                    index1 === selectedPosition && index2 === position\n                )\n\n                if (action) {\n                    state = playTurn(state, action)\n                    return\n                } else {\n                    selectedPosition = -1\n                }\n            }\n            \n            if (isValid(position)) {\n                selectedPosition = position\n            }\n        } else if (state.phase === PLACE_CARD) {\n            const action = _.find(moves, ({index}) => {\n                return index === position\n            })\n\n            if (action) {\n                state = playTurn(state, action)\n            }\n        }\n    }\n\n    const img = new Image()\n    img.src = 'https://dok7xy59qfw9h.cloudfront.net/587/070/202/-239996995-1t62joi-8mq5akftktd5se5/original/file.jpg'\n</script>\n\n<style>\n    h1 {\n        text-align: center;\n    }\n\t.grid {\n\t    display: grid;\n\t    grid-template-rows: repeat(4, 94px);\n\t    grid-template-columns: repeat(4, 69px);\n\t    grid-gap: 10px;\n\t    padding: 10px;\n\t    background-color: darkgreen;\n\t    width: 306px;\n\t    height: 406px;\n\t    margin: auto;\n        position: relative;\n\t}\n\n    .grid.disabled:after {\n        content: '';\n        background: url(https://dok7xy59qfw9h.cloudfront.net/587/070/202/-239996995-1t62joi-8mq5akftktd5se5/original/file.jpg);\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        background-position: -50px center;\n    }\n\n    .playmode-wrapper {\n        user-select: none;\n        margin: 50px auto;\n        text-align: center;\n    }\n\n    .playmode-wrapper > label {\n        display: inline-block;\n    }\n\n\t.next-card {\n        margin: 50px auto;\n\t}\n\t.card {\n        width: 69px;\n        height: 94px;\n    }\n\n    .placeholder {\n        cursor: pointer;\n        border-radius: 2px;\n    }\n\n    .placeholder:hover {\n        box-shadow: 0px 0px 2px 4px #20b825;\n    }\n\n    .placeholder.invalid:hover {\n        box-shadow: 0px 0px 2px 4px #b82020;\n    }\n\n    .selected {\n        box-shadow: 0px 0px 2px 4px #eee251;\n    }\n</style>\n\n<h1>Play Kadosh! {state.phase}</h1>\n\n<div class=\"grid\" class:disabled={state.phase === GAME_OVER}>\n    {#each state.board as card, i (i)}\n        <div class=\"card placeholder\" \n            class:selected={selectedPosition === i}\n            class:invalid={!isValid(i)}\n            data-position={i} \n            on:click={onBoardClick}>\n            <Card {card} showCard={true} />\n        </div>\n    {/each}\n</div>\n\n<div class=\"playmode-wrapper\">\n    Play Mode:\n    <label>\n        <input type=radio bind:group={mode} value={'human'}>\n        Human\n    </label>\n    <label>\n        <input type=radio bind:group={mode} value={'random'}>\n        Random Monkey\n    </label>\n</div>\n\n<div class=\"card next-card\" on:click={playTurn2}>\n    <Card card={nextCard} showCard={state.phase === PLACE_CARD}></Card>\n</div>",
    "<script>\n\texport let card\n\texport let showCard\n\n    const cardWidth = 69\n    const cardHeight = 94\n\n    function cardValue(card) {\n        if (card.value === 'A') {\n            return 1\n        }\n        if (card.value === 'J') {\n            return 11\n        }\n        if (card.value === 'Q') {\n            return 12\n        }\n        if (card.value === 'K') {\n            return 13\n        }\n        return parseInt(card.value, 10)\n    }\n\n    function calcBgPosition(c, show) {\n\t    if (!c) {\n\t        return '0px 0px'\n\t    }\n\t    if (!show) {\n\t        return '0px 0px'\n\t    }\n        const offsets = { \"c\": 0, \"d\": 1, \"h\": 2, \"s\": 3 }\n        const suit = c.suit.charAt(0).toLowerCase()\n        const rank = cardValue(c)\n\n        return `${-rank * cardWidth}px ${-offsets[suit] * cardHeight}px`\n    }\n\n\t$: backgroundPosition = calcBgPosition(card, showCard)\n</script>\n\n<style>\n\t.card {\n        background-image: url(\"http://einaregilsson.github.io/cards.js/img/cards.png\");\n        cursor:pointer;\n        width: 69px;\n        height: 94px;\n\t}\n\t.empty {\n        background-color: green;\n        border-radius: 8px;\n        width: 69px;\n        height: 94px;\n    }\n</style>\n\n<div\n    class=\"{card ? 'card ' + card.suit + '_' + card.value : 'empty'}\"\n    style=\"background-position: {backgroundPosition}\">\n</div>"
  ],
  "names": [],
  "mappings": "AA4GI,EAAE,eAAC,CAAC,AACA,UAAU,CAAE,MAAM,AACtB,CAAC,AACJ,KAAK,eAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CACnC,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CACtC,QAAQ,CAAE,IAAI,CACd,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,SAAS,CAC3B,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,IAAI,CACT,QAAQ,CAAE,QAAQ,AACzB,CAAC,AAEE,KAAK,wBAAS,MAAM,AAAC,CAAC,AAClB,OAAO,CAAE,EAAE,CACX,UAAU,CAAE,IAAI,qGAAqG,CAAC,CACtH,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,mBAAmB,CAAE,KAAK,CAAC,MAAM,AACrC,CAAC,AAED,iBAAiB,eAAC,CAAC,AACf,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,gCAAiB,CAAG,KAAK,eAAC,CAAC,AACvB,OAAO,CAAE,YAAY,AACzB,CAAC,AAEJ,UAAU,eAAC,CAAC,AACL,MAAM,CAAE,IAAI,CAAC,IAAI,AACxB,CAAC,AACD,KAAK,eAAC,CAAC,AACA,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,YAAY,eAAC,CAAC,AACV,MAAM,CAAE,OAAO,CACf,aAAa,CAAE,GAAG,AACtB,CAAC,AAED,2BAAY,MAAM,AAAC,CAAC,AAChB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,AACvC,CAAC,AAED,YAAY,uBAAQ,MAAM,AAAC,CAAC,AACxB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,AACvC,CAAC,AAED,SAAS,eAAC,CAAC,AACP,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,AACvC,CAAC;AC7HJ,KAAK,eAAC,CAAC,AACA,gBAAgB,CAAE,IAAI,uDAAuD,CAAC,CAC9E,OAAO,OAAO,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACnB,CAAC,AACD,MAAM,eAAC,CAAC,AACD,gBAAgB,CAAE,KAAK,CACvB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC"
}